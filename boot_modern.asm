[BITS 16]
[ORG 0x7C00]

start:
    cli                 ; Отключить прерывания (хорошо для критического кода загрузки)
    cld                 ; Очистить флаг направления (для строковых операций, таких как LODSB)
    xor ax, ax          ; Установить AX в 0
    mov ds, ax          ; DS = 0 (важно для доступа к данным)
    mov es, ax          ; ES = 0 (обычно для строковых операций, здесь не критично, но безопасно)
    mov ss, ax          ; SS = 0 (сегмент стека)
    mov sp, 0x7C00      ; SP = 0x7C00 (стек начинается прямо перед кодом загрузчика)
    sti                 ; Включить прерывания (после инициализации стека)

    ; Минимальная инициализация
    ; Эта строка: mov ax, 0x0003 и int 0x10
    ; устанавливает видеорежим 80x25 текстовый (цветной).
    ; Иногда может быть причиной проблем на старом/новом железе.
    ; Попробуйте закомментировать ее для теста.
    mov ax, 0x0003
    int 0x10

    ; Короткое сообщение
    mov si, msg         ; SI указывает на начало строки
    call print          ; Вызов процедуры печати
    jmp $               ; Бесконечный цикл, чтобы программа не "провалилась"

print:
    lodsb               ; Загрузить байт из [DS:SI] в AL, увеличить SI
    test al, al         ; Проверить, является ли AL нулевым (конец строки)
    jz .done            ; Если да, то строка закончилась
    mov ah, 0x0E        ; Функция Teletype Output (вывод символа в AL)
    int 0x10            ; Вызов BIOS
    jmp print           ; Повторить для следующего символа
.done:
    ret                 ; Возврат из процедуры

msg db "HelloWorld! This is first ever vibe-coded kernel! -by ErikGajiumarov", 0

times 510 - ($ - $$) db 0   ; Заполнить оставшееся пространство нулями
dw 0xAA55                   ; Загрузочная подпись (55AAh)